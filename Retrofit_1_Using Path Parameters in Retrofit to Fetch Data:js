The provided code demonstrates the usage of Retrofit to fetch a post by its ID
The code you provided uses Retrofit to fetch a post by its ID in a Kotlin Compose application. 
  This app Uses the path annotat



1.Data_Model.kt:

data class PostResponse(
    val id: String,
    val userId: String,
    val title: String,
    val body: String
)

  
2.Post_Service.kt:

interface PostService {
    @GET("posts/{id}")
    suspend fun getPostById(@Path("id") postId: Int): Response<PostResponse>
}



3.Service_Builder.kt:

object ServiceBuilder {
    private const val URL = "https://jsonplaceholder.typicode.com"

    private val okkhttp = OkHttpClient.Builder()
    private val builder = Retrofit.Builder().baseUrl(URL)
        .addConverterFactory(GsonConverterFactory.create())
        .client(okkhttp.build())

    private val retrofit = builder.build()

    fun <T> buildService(serviceType: Class<T>): T {
        return retrofit.create(serviceType)
    }
}




4.class PostViewModel : ViewModel() {
  var errorMessage1: String?by mutableStateOf("")

  private val _postDetail = MutableLiveData<PostResponse>()
    val postDetail: LiveData<PostResponse>
        get() = _postDetail

  fun getPostById(postId:Int) {
        viewModelScope.launch {
            val postService = ServiceBuilder.buildService(PostService::class.java)
            try {
                val response = postService.getPostById(postId)
                if (response.isSuccessful) {
                    _postDetail.value = response.body()
                }
            } catch (e: Exception) {
                errorMessage1 = e.message.toString()
            }

        }
    }

  }








5.Display_data.kt
  @Composable
fun DisplayPostDetail(postId: Int, postViewModel: PostViewModel) {
    // Fetch the post detail when the composable is first launched
    LaunchedEffect(postId) {
        postViewModel.getPostById(postId)
    }

    val postDetail = postViewModel.postDetail.observeAsState().value

    if (postDetail != null) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
        ) {
            Text(
                text = postDetail.title,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            Text(
                text = postDetail.body,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            // Display other details of the post as needed
        }
    } else {
        // Show a loading indicator or error message
        val errorMessage = postViewModel.errorMessage1
        if (errorMessage != null) {
            CircularProgressIndicator(
                modifier = Modifier
                    .size(48.dp)
                    .padding(16.dp)
            )

        } else {

            Text(
                text = "Error: $errorMessage",
                modifier = Modifier.padding(16.dp),
                color = androidx.compose.ui.graphics.Color.Red
            )

        }
    }
}



Step 5 Explained 

To display the data returned for a post in a Composable function, you can observe the LiveData postDetail from the PostViewModel and use it to render the UI.
  Heres an example of how you can achieve that:

In the above code, DisplayPostDetail is a Composable function that takes the postId and postViewModel as parameters. It uses the observeAsState function on the postDetail LiveData to observe changes in the post detail and recompose the UI accordingly.

When the composable is launched, it triggers the getPostById function in the PostViewModel to fetch the post detail for the given postId. The retrieved postDetail is then used to display the title and body of the post. You can add additional UI elements and styling based on your requirements.

In case there is an error during the API call, the errorMessage is displayed as a red-colored error message. If the API call is still in progress, a loading indicator (CircularProgressIndicator) is shown.

To use this DisplayPostDetail composable, you need to pass the postId and an instance of PostViewModel to it. For example:

kotlin
Copy code
// Inside your composable function or activity
val postViewModel: PostViewModel = viewModel()
DisplayPostDetail(postId = 1, postViewModel = postViewModel)
Make sure to replace 1 with the actual postId you want to fetch and display.





















