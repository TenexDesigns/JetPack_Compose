USER

package com.example.tenexapp.data

import android.arch.persistence.room.Dao
import android.arch.persistence.room.Entity
import android.arch.persistence.room.PrimaryKey


@Entity(tableName="user_table")// Next we have to give our entity a table name
data class User(
   @PrimaryKey(autoGenerate = true)// Means our room will automaticlay generate our id and increase it.
    val id:Int,                         // This will be our primary key and it will be automaticly generated by the room database
    val firstName:String,
    val LastName:String,
    val age:Int
)


//Next we have to create our dao interface.


USERDAO

package com.example.tenexapp.data

import android.arch.persistence.room.Dao
import android.arch.persistence.room.Insert
import android.arch.persistence.room.OnConflictStrategy
import android.arch.persistence.room.Query
import androidx.lifecycle.LiveData


//DAO -Data Access Object
//Contains the methods used for accessing the database.

@Dao
interface UserDao {

    //This is a query for inserting the data
    @Insert( onConflict = OnConflictStrategy.IGNORE)
    suspend fun addUser(user:User)

    //This is a query for reading the data
    @Query("SELECT * FROM user_table ORDER BY id ASC")
    fun readAllData(): LiveData<List<User>>
}


USERDATABASE

package com.example.tenexapp.data

import android.arch.persistence.room.Database
import android.arch.persistence.room.RoomDatabase
import android.content.Context


//DATA BASE
//Contains the database holder and serves as the main
// access point for the underlying connection to your appâ€™s  data.


//We need to add abstract infront of this class
//We need to extend the RoomDatabase class
//We need to annotate  this class with the  @DataBase

@Database( entities = [User::class], version = 1, exportSchema = false)
 abstract class UserDataBase:RoomDatabase() {

  abstract fun userDao():UserDao

  companion object {
   @Volatile
   private var INSTANCE:UserDataBase? = null

   fun getDatabase(context: Context) {
    val tempInstance = INSTANCE
    if(tempInstance != null){
     return tempInstance
    }
    synchronized(this){
     val instance
    }
   }


  }



}


















